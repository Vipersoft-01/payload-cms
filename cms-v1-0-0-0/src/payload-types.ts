/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    posts: Post;
    projects: Project;
    pages: Page;
    media: Media;
    categories: Category;
    websites: Website;
    vacancies: Vacancy;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  websites?: (number | Website)[] | null;
  roles?: ('admin' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "websites".
 */
export interface Website {
  id: number;
  title: string;
  users?: (number | User)[] | null;
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  categories?: (number | Category)[] | null;
  publishedOn?: string | null;
  authors: (number | User)[];
  populatedAuthors?:
  | {
    id?: string | null;
    name?: string | null;
  }[]
  | null;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    links?:
    | {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?: {
          relationTo: 'pages';
          value: number | Page;
        } | null;
        url?: string | null;
        label: string;
        appearance?: ('default' | 'primary' | 'secondary') | null;
      };
      id?: string | null;
    }[]
    | null;
    media?: number | Media | null;
  };
  layout: (
    | {
      invertBackground?: boolean | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      links?:
      | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'cta';
    }
    | {
      invertBackground?: boolean | null;
      columns?:
      | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('default' | 'primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'content';
    }
    | {
      invertBackground?: boolean | null;
      mediaPosition?: ('left' | 'right') | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'contentMedia';
    }
    | {
      invertBackground?: boolean | null;
      position?: ('default' | 'fullscreen') | null;
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'mediaBlock';
    }
    | {
      introContent: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      populateBy?: ('collection' | 'selection') | null;
      relationTo?: ('posts' | 'projects') | null;
      categories?: (number | Category)[] | null;
      limit?: number | null;
      selectedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocsTotal?: number | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'archive';
    }
  )[];
  enablePremiumContent?: boolean | null;
  premiumContent?:
  | (
    | {
      invertBackground?: boolean | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      links?:
      | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'cta';
    }
    | {
      invertBackground?: boolean | null;
      columns?:
      | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('default' | 'primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'content';
    }
    | {
      invertBackground?: boolean | null;
      position?: ('default' | 'fullscreen') | null;
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'mediaBlock';
    }
    | {
      introContent: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      populateBy?: ('collection' | 'selection') | null;
      relationTo?: ('posts' | 'projects') | null;
      categories?: (number | Category)[] | null;
      limit?: number | null;
      selectedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocsTotal?: number | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'archive';
    }
  )[]
  | null;
  relatedPosts?: (number | Post)[] | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  website?: string | null;
  owner?: string | null;
  title: string;
  publishedDate?: string | null;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    links?:
    | {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?: {
          relationTo: 'pages';
          value: number | Page;
        } | null;
        url?: string | null;
        label: string;
        appearance?: ('default' | 'primary' | 'secondary') | null;
      };
      id?: string | null;
    }[]
    | null;
    media?: number | Media | null;
  };
  layout: (
    | {
      invertBackground?: boolean | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      links?:
      | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'cta';
    }
    | {
      invertBackground?: boolean | null;
      columns?:
      | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('default' | 'primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'content';
    }
    | {
      invertBackground?: boolean | null;
      mediaPosition?: ('left' | 'right') | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'contentMedia';
    }
    | {
      invertBackground?: boolean | null;
      position?: ('default' | 'fullscreen') | null;
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'mediaBlock';
    }
    | {
      introContent: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      populateBy?: ('collection' | 'selection') | null;
      relationTo?: ('posts' | 'projects') | null;
      categories?: (number | Category)[] | null;
      limit?: number | null;
      selectedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocsTotal?: number | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'archive';
    }
  )[];
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  title: string;
  categories?: (number | Category)[] | null;
  publishedDate?: string | null;
  hero: {
    richText: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    media?: number | Media | null;
  };
  layout: (
    | {
      invertBackground?: boolean | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      links?:
      | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'cta';
    }
    | {
      invertBackground?: boolean | null;
      columns?:
      | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('default' | 'primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
      | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'content';
    }
    | {
      invertBackground?: boolean | null;
      mediaPosition?: ('left' | 'right') | null;
      richText: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'contentMedia';
    }
    | {
      invertBackground?: boolean | null;
      position?: ('default' | 'fullscreen') | null;
      media: number | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'mediaBlock';
    }
    | {
      introContent: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      populateBy?: ('collection' | 'selection') | null;
      relationTo?: ('posts' | 'projects') | null;
      categories?: (number | Category)[] | null;
      limit?: number | null;
      selectedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocs?:
      | (
        | {
          relationTo: 'posts';
          value: number | Post;
        }
        | {
          relationTo: 'projects';
          value: number | Project;
        }
      )[]
      | null;
      populatedDocsTotal?: number | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'archive';
    }
  )[];
  relatedProjects?: (number | Project)[] | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vacancies".
 */
export interface Vacancy {
  id: number;
  website?: string | null;
  owner?: string | null;
  title: string;
  description: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  content_html?: string | null;
  publishedDate?: string | null;
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
  | {
    [k: string]: unknown;
  }
  | unknown[]
  | string
  | number
  | boolean
  | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config { }
}